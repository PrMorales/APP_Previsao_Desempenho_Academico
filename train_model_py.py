# -*- coding: utf-8 -*-
"""train_model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oK4dia4BNy7pa-w13L1AY5DrRX9YF80m
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import joblib
import os

def load_and_preprocess_data(filepath):
    df = pd.read_csv(filepath)

    # Pr√©-processamento
    # Codificar vari√°veis categ√≥ricas
    categorical_cols = ['gender', 'part_time_job', 'diet_quality', 'parental_education_level',
                       'internet_quality', 'extracurricular_participation']

    label_encoders = {}
    for col in categorical_cols:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
        label_encoders[col] = le

    # Selecionar features e target
    features = ['age', 'gender', 'study_hours_per_day', 'social_media_hours',
                'netflix_hours', 'part_time_job', 'attendance_percentage',
                'sleep_hours', 'diet_quality', 'exercise_frequency',
                'parental_education_level', 'internet_quality',
                'mental_health_rating', 'extracurricular_participation']

    X = df[features]
    y = df['exam_score']

    # Normalizar os dados
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return X_scaled, y, features, label_encoders, scaler

def train_and_save_model(X, y, features):
    # Dividir os dados
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Treinar o modelo
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Avaliar o modelo
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f"Mean Squared Error: {mse:.2f}")
    print(f"R-squared: {r2:.2f}")

    return model

def save_artifacts(model, features, label_encoders, scaler):
    # Criar diret√≥rio se n√£o existir
    os.makedirs('model_artifacts', exist_ok=True)

    # Salvar o modelo e artefatos
    joblib.dump(model, 'model_artifacts/modelo_treinado.joblib')
    joblib.dump(features, 'model_artifacts/features.joblib')
    joblib.dump(label_encoders, 'model_artifacts/label_encoders.joblib')
    joblib.dump(scaler, 'model_artifacts/scaler.joblib')

    # Salvar as colunas em CSV para refer√™ncia
    pd.DataFrame(features, columns=['features']).to_csv('model_artifacts/colunas_treinamento.csv', index=False)

if __name__ == "__main__":
    # Carregar e pr√©-processar os dados
    filepath = 'student_habits_performance.csv'  # Substitua pelo caminho do seu arquivo
    X, y, features, label_encoders, scaler = load_and_preprocess_data(filepath)

    # Treinar o modelo
    model = train_and_save_model(X, y, features)

    # Salvar artefatos
    save_artifacts(model, features, label_encoders, scaler)
    print("Modelo e artefatos salvos com sucesso!")

!pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import joblib
# import numpy as np
# import os
# 
# # Configura√ß√£o da p√°gina
# st.set_page_config(page_title="Previs√£o de Notas Acad√™micas", page_icon="üìö", layout="wide")
# 
# # Verificar se os arquivos do modelo existem
# def check_model_files():
#     required_files = [
#         'model_artifacts/modelo_treinado.joblib',
#         'model_artifacts/features.joblib',
#         'model_artifacts/label_encoders.joblib',
#         'model_artifacts/scaler.joblib'
#     ]
# 
#     missing_files = []
#     for file in required_files:
#         if not os.path.exists(file):
#             missing_files.append(file)
# 
#     return missing_files
# 
# # Fun√ß√£o para carregar os artefatos do modelo
# @st.cache_resource
# def load_model():
#     missing_files = check_model_files()
#     if missing_files:
#         st.error(f"Arquivos do modelo n√£o encontrados: {', '.join(missing_files)}")
#         st.error("Por favor, execute primeiro o script train_model.py para gerar os arquivos do modelo.")
#         st.stop()
# 
#     try:
#         model = joblib.load('model_artifacts/modelo_treinado.joblib')
#         features = joblib.load('model_artifacts/features.joblib')
#         label_encoders = joblib.load('model_artifacts/label_encoders.joblib')
#         scaler = joblib.load('model_artifacts/scaler.joblib')
#         return model, features, label_encoders, scaler
#     except Exception as e:
#         st.error(f"Erro ao carregar os artefatos do modelo: {str(e)}")
#         st.stop()
# 
# # Carregar os artefatos
# model, features, label_encoders, scaler = load_model()
# 
# # Mapeamentos para a interface
# GENDER_MAP = {'Masculino': 'Male', 'Feminino': 'Female', 'Outro': 'Other'}
# JOB_MAP = {'Sim': 'Yes', 'N√£o': 'No'}
# DIET_MAP = {'Pobre': 'Poor', 'Regular': 'Fair', 'Boa': 'Good'}
# EDUCATION_MAP = {
#     'Nenhum': 'None',
#     'Ensino M√©dio': 'High School',
#     'Bacharelado': 'Bachelor',
#     'Mestrado': 'Master'
# }
# INTERNET_MAP = {'Pobre': 'Poor', 'Regular': 'Average', 'Boa': 'Good'}
# EXTRACURRICULAR_MAP = {'Sim': 'Yes', 'N√£o': 'No'}
# 
# # Interface do usu√°rio
# st.title("üìä Previs√£o de Desempenho Acad√™mico")
# st.markdown("""
# Este aplicativo prev√™ a nota de um estudante com base em seus h√°bitos e caracter√≠sticas pessoais.
# Preencha os campos abaixo e clique em **Prever Nota** para ver o resultado.
# """)
# 
# # Layout do formul√°rio
# col1, col2 = st.columns(2)
# 
# with col1:
#     st.header("Informa√ß√µes Pessoais")
#     age = st.slider("Idade", 17, 24, 20)
#     gender_display = st.selectbox("G√™nero", list(GENDER_MAP.keys()))
#     part_time_job_display = st.selectbox("Trabalho de meio per√≠odo", list(JOB_MAP.keys()))
# 
#     st.header("H√°bitos de Estudo")
#     study_hours = st.slider("Horas de estudo por dia", 0.0, 10.0, 3.0, 0.1)
#     attendance = st.slider("Frequ√™ncia escolar (%)", 50, 100, 85)
#     extracurricular_display = st.selectbox("Participa de atividades extracurriculares?", list(EXTRACURRICULAR_MAP.keys()))
# 
# with col2:
#     st.header("H√°bitos de Vida")
#     sleep_hours = st.slider("Horas de sono por noite", 3.0, 10.0, 7.0, 0.1)
#     diet_quality_display = st.selectbox("Qualidade da dieta", list(DIET_MAP.keys()))
#     exercise_freq = st.slider("Frequ√™ncia de exerc√≠cios por semana", 0, 7, 3)
# 
#     st.header("Uso de Tecnologia")
#     social_media = st.slider("Horas em redes sociais por dia", 0.0, 10.0, 2.0, 0.1)
#     netflix_hours = st.slider("Horas em Netflix/streaming por dia", 0.0, 10.0, 1.0, 0.1)
# 
#     st.header("Outros Fatores")
#     parental_education_display = st.selectbox("N√≠vel educacional dos pais", list(EDUCATION_MAP.keys()))
#     internet_quality_display = st.selectbox("Qualidade da internet", list(INTERNET_MAP.keys()))
#     mental_health = st.slider("Autoavalia√ß√£o de sa√∫de mental (1-10)", 1, 10, 7)
# 
# # Processamento da previs√£o
# if st.button("Prever Nota"):
#     # Preparar os dados de entrada
#     input_data = {
#         'age': age,
#         'gender': GENDER_MAP[gender_display],
#         'study_hours_per_day': study_hours,
#         'social_media_hours': social_media,
#         'netflix_hours': netflix_hours,
#         'part_time_job': JOB_MAP[part_time_job_display],
#         'attendance_percentage': attendance,
#         'sleep_hours': sleep_hours,
#         'diet_quality': DIET_MAP[diet_quality_display],
#         'exercise_frequency': exercise_freq,
#         'parental_education_level': EDUCATION_MAP[parental_education_display],
#         'internet_quality': INTERNET_MAP[internet_quality_display],
#         'mental_health_rating': mental_health,
#         'extracurricular_participation': EXTRACURRICULAR_MAP[extracurricular_display]
#     }
# 
#     try:
#         # Converter para DataFrame
#         input_df = pd.DataFrame([input_data])
# 
#         # Codificar vari√°veis categ√≥ricas
#         for col, le in label_encoders.items():
#             if col in input_df.columns:
#                 input_df[col] = le.transform(input_df[col].astype(str))
# 
#         # Reordenar colunas
#         input_df = input_df[features]
# 
#         # Normalizar os dados
#         input_scaled = scaler.transform(input_df)
# 
#         # Fazer a previs√£o
#         prediction = model.predict(input_scaled)[0]
# 
#         # Exibir resultados
#         st.success(f"### Nota prevista: {prediction:.1f}/100")
# 
#         # Interpreta√ß√£o
#         st.markdown("---")
#         st.subheader("Interpreta√ß√£o")
#         if prediction >= 90:
#             st.success("Excelente desempenho! Continue assim.")
#         elif prediction >= 70:
#             st.info("Bom desempenho. Pode melhorar ainda mais.")
#         elif prediction >= 50:
#             st.warning("Desempenho m√©dio. Recomendamos ajustes.")
#         else:
#             st.error("Desempenho abaixo da m√©dia. Necess√°rio rever h√°bitos.")
# 
#     except Exception as e:
#         st.error(f"Erro durante a previs√£o: {str(e)}")
# 
# # Rodap√©
# st.markdown("---")
# st.caption("Aplicativo desenvolvido para previs√£o de desempenho acad√™mico")